//*****************************************************************************
// Filename : 'font5x7p.h'
// Title    : Graphic lcd 5x5 proportional font (ascii characters)
//*****************************************************************************

#ifndef FONT5X5P_H
#define FONT5X5P_H

//
// An ascii 5x5 proportional bitmap font.
// Defines ascii characters 0x20-0x7F (32-127).
//
// A character requires 5 bytes. The first byte is the width of the character
// merged with the first font byte. The next four bytes are the remaining 
// bitmaps for the character.
// The bitmap bytes move from left to right and the LSB defines the 'top dot'.
//
// Example for char 'R':
// Data: (0x03 << 5) | 0x1f, 0x05, 0x1a, 0x00, 0x00,
// => Width : 0x03
// => Bitmap: 0x1f, 0x05, 0x1a
//
// 0x01 - # # .
// 0x02 - # . #
// 0x04 - # # .
// 0x08 - # . #
// 0x10 - # . #
//
// Note: To preserve precious flash space, the lowercase characters are
// omitted as they are identical to their uppercase version. When using a
// lowercase character the user must manually remap it to its uppercase
// version. Characters that are located after the lowercase set are shifted
// since the lowercase characters do not exist.
// See code example below that defines a proper offset in the font array and
// gets the width of the character as derived from the first font byte.
//
// char c;
// u08 idxOffset, width;
// if (c >= 'a' && c <= 'z')
//   idxOffset = 0x20;
// else if (c > 'z')
//   idxOffset = 26;
// else
//   idxOffset = 0;
// width = (pgm_read_byte(&Font5x5p[(c - 0x20 - idxOffset) * 5]) >> 5);
//

// Define the 5x7 proportional character bitmaps
const unsigned char __attribute__ ((progmem)) Font5x5p[] =
{
  (0x01 << 5) | 0x00, 0x00, 0x00, 0x00, 0x00,// (space)
  (0x01 << 5) | 0x17, 0x00, 0x00, 0x00, 0x00,// !
  (0x03 << 5) | 0x03, 0x00, 0x03, 0x00, 0x00,// "
  (0x05 << 5) | 0x0a, 0x1f, 0x0a, 0x1f, 0x0a,// #
  (0x05 << 5) | 0x02, 0x15, 0x1f, 0x15, 0x08,// $
  (0x03 << 5) | 0x19, 0x04, 0x13, 0x00, 0x00,// %
  //(0x04 << 5) | 0x0a, 0x15, 0x12, 0x08, 0x00,// &
  (0x04 << 5) | 0x02, 0x04, 0x02, 0x00, 0x00,// & - remapped to v-mark
  (0x01 << 5) | 0x03, 0x00, 0x00, 0x00, 0x00,// '
  (0x02 << 5) | 0x0e, 0x11, 0x00, 0x00, 0x00,// (
  (0x02 << 5) | 0x11, 0x0e, 0x00, 0x00, 0x00,// )
  (0x03 << 5) | 0x0a, 0x04, 0x0a, 0x00, 0x00,// *
  (0x03 << 5) | 0x04, 0x0e, 0x04, 0x00, 0x00,// +
  (0x02 << 5) | 0x10, 0x08, 0x00, 0x00, 0x00,// ,
  (0x03 << 5) | 0x04, 0x04, 0x04, 0x00, 0x00,// -
  (0x01 << 5) | 0x10, 0x00, 0x00, 0x00, 0x00,// .
  (0x03 << 5) | 0x18, 0x04, 0x03, 0x00, 0x00,// /
  (0x03 << 5) | 0x1f, 0x11, 0x1f, 0x00, 0x00,// 0
  (0x03 << 5) | 0x12, 0x1f, 0x10, 0x00, 0x00,// 1
  (0x03 << 5) | 0x1d, 0x15, 0x17, 0x00, 0x00,// 2
  (0x03 << 5) | 0x15, 0x15, 0x1f, 0x00, 0x00,// 3
  (0x03 << 5) | 0x07, 0x04, 0x1f, 0x00, 0x00,// 4
  (0x03 << 5) | 0x17, 0x15, 0x1d, 0x00, 0x00,// 5
  (0x03 << 5) | 0x1f, 0x15, 0x1d, 0x00, 0x00,// 6
  (0x03 << 5) | 0x01, 0x1d, 0x03, 0x00, 0x00,// 7
  (0x03 << 5) | 0x1f, 0x15, 0x1f, 0x00, 0x00,// 8
  (0x03 << 5) | 0x17, 0x15, 0x1f, 0x00, 0x00,// 9
  (0x01 << 5) | 0x0a, 0x00, 0x00, 0x00, 0x00,// :
  (0x02 << 5) | 0x10, 0x0a, 0x00, 0x00, 0x00,// ;
  (0x02 << 5) | 0x04, 0x0a, 0x00, 0x00, 0x00,// <
  (0x03 << 5) | 0x0a, 0x0a, 0x0a, 0x00, 0x00,// =
  (0x02 << 5) | 0x0a, 0x04, 0x00, 0x00, 0x00,// >
  (0x03 << 5) | 0x01, 0x15, 0x02, 0x00, 0x00,// ?
  //(0x04 << 5) | 0x08, 0x15, 0x19, 0x0e, 0x00,// @
  (0x04 << 5) | 0x0e, 0x04, 0x02, 0x00, 0x00,// @ - remapped to tickbox-mark
  (0x03 << 5) | 0x1e, 0x05, 0x1e, 0x00, 0x00,// A
  (0x03 << 5) | 0x1f, 0x15, 0x0a, 0x00, 0x00,// B
  (0x03 << 5) | 0x0e, 0x11, 0x11, 0x00, 0x00,// C
  (0x03 << 5) | 0x1f, 0x11, 0x0e, 0x00, 0x00,// D
  (0x02 << 5) | 0x1f, 0x15, 0x00, 0x00, 0x00,// E
  (0x02 << 5) | 0x1f, 0x05, 0x00, 0x00, 0x00,// F
  (0x03 << 5) | 0x0e, 0x11, 0x1d, 0x00, 0x00,// G
  (0x03 << 5) | 0x1f, 0x04, 0x1f, 0x00, 0x00,// H
  (0x01 << 5) | 0x1f, 0x00, 0x00, 0x00, 0x00,// I
  (0x02 << 5) | 0x10, 0x0f, 0x00, 0x00, 0x00,// J
  (0x03 << 5) | 0x1f, 0x04, 0x1b, 0x00, 0x00,// K
  (0x02 << 5) | 0x1f, 0x10, 0x00, 0x00, 0x00,// L
  (0x05 << 5) | 0x1f, 0x02, 0x04, 0x02, 0x1f,// M
  (0x04 << 5) | 0x1f, 0x02, 0x04, 0x1f, 0x00,// N
  (0x03 << 5) | 0x0e, 0x11, 0x0e, 0x00, 0x00,// O
  (0x03 << 5) | 0x1f, 0x05, 0x02, 0x00, 0x00,// P
  (0x04 << 5) | 0x02, 0x15, 0x1d, 0x12, 0x00,// Q
  (0x03 << 5) | 0x1f, 0x05, 0x1a, 0x00, 0x00,// R
  (0x03 << 5) | 0x12, 0x15, 0x09, 0x00, 0x00,// S
  (0x03 << 5) | 0x01, 0x1f, 0x01, 0x00, 0x00,// T
  (0x03 << 5) | 0x1f, 0x10, 0x1f, 0x00, 0x00,// U
  (0x03 << 5) | 0x0f, 0x10, 0x0f, 0x00, 0x00,// V
  (0x05 << 5) | 0x0f, 0x10, 0x0c, 0x10, 0x0f,// W
  (0x03 << 5) | 0x1b, 0x04, 0x1b, 0x00, 0x00,// X
  (0x03 << 5) | 0x03, 0x1c, 0x03, 0x00, 0x00,// Y
  (0x03 << 5) | 0x19, 0x15, 0x13, 0x00, 0x00,// Z
  (0x02 << 5) | 0x1f, 0x11, 0x00, 0x00, 0x00,// [
  //(0x03 << 5) | 0x03, 0x04, 0x18, 0x00, 0x00,// "\"
  (0x03 << 5) | 0x14, 0x08, 0x14, 0x00, 0x00,// "\" - remapped to x-mark
  (0x02 << 5) | 0x11, 0x1f, 0x00, 0x00, 0x00,// ]
  (0x03 << 5) | 0x02, 0x01, 0x02, 0x00, 0x00,// ^
  (0x03 << 5) | 0x10, 0x10, 0x10, 0x00, 0x00,// _
  (0x02 << 5) | 0x01, 0x02, 0x00, 0x00, 0x00,// `
  // Gap for non-existing a-z lowercase characters
  (0x03 << 5) | 0x04, 0x1f, 0x11, 0x00, 0x00,// {
  (0x01 << 5) | 0x1f, 0x00, 0x00, 0x00, 0x00,// |
  (0x03 << 5) | 0x11, 0x1f, 0x04, 0x00, 0x00,// }
  (0x04 << 5) | 0x04, 0x15, 0x0e, 0x04, 0x00,// ->
  (0x04 << 5) | 0x04, 0x0e, 0x15, 0x04, 0x00 // <-
};
#endif

