#
# Test command script for the Monochron emulator
#
# Purpose: Test glcdBitmap() using image data
#

le
psf
hm
hm Read in image in buffer 0 in byte (8-bit) format and display it
w 500
gfi 0 b 128 64 ../script/bitmap/image-byte.txt
gbi 0
pbi 0 0 0
hm
w 0

le
hm
hm Read in same image in buffer 1 but now in word (16-bit) format and display it
w 500
gfi 1 w 128 64 ../script/bitmap/image-word.txt
gbi 1
pbi 1 0 0
hm
w 0

le
hm
hm Read in same image in buffer 2 but now in dword (32-bit) format and display it
w 500
gfi 2 d 128 64 ../script/bitmap/image-dword.txt
gbi 2
pbi 2 0 0
hm
w 0

le
hm
hm Display the dword image from buffer 2 upside down
# The purpose of this code is to show that glcdBitmap() is able to access any
# section of the bitmap data it is fed with, in this case down to individual
# bitmap image lines.
# Note that this is an expensive operation as we write the image in 64 separate
# lines. In Emuchron we will be fine but on an actual Monochron you will notice
# image buildup slugginess.
w 500
rf bit=0 bit<32 bit=bit+1
  pb 2 0 31-bit 128 bit 128 1
  pb 2 0 63-bit 0 bit 128 1
rn
hm
w 0

le
hm
hm Display the dword image from buffer 2 inversed and point mirrored on (64,32)
# The purpose of this code is to show that glcdBitmap() is able to access any
# section of bitmap data it is fed with, down to an individual bitmap pixel.
# Note that this is a VERY expensive operation as we need to write the image
# pixel by pixel. Even in Emuchron this will take about 70 msec to accomplish.
# On an actual Monochron you will see the image building up quite slowly.
# Note: We can combine the two inner loops into a single one. But by splitting
# them up we can save on 8128 controller y-cursor commands (by knowing how the
# ks0108.c [firmware] controller software cursor administration is optimized).
w 500
psb
rf bit=0 bit<32 bit=bit+1
  rf x=0 x<128 x=x+1
    pb 2 x 31-bit 255-x bit 1 1
  rn
  rf x=0 x<128 x=x+1
    pb 2 x 63-bit 127-x bit 1 1
  rn
rn
hm
w 0

le
hm
hm Horizontally rotate the dword image from buffer 2.
hm
hm --- press 'q' to quit ---
wts
psf
rf offset=0 true offset=(offset+1)%128
  pb 2 0 0 offset 0 128-offset 32
  pb 2 0 32 128+offset 0 128-offset 32
  iif offset!=0
    pb 2 128-offset 0 0 0 offset 32
    pb 2 128-offset 32 128 0 offset 32
  ien
  wte 75
rn
